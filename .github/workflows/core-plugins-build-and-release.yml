on:
  workflow_dispatch:
    inputs:
      plugin_id:
        description: "ID of the plugin you want to publish"
        required: true
        type: choice
        options:
          - grafana-testdata-datasource
      type:
        description: "Datasource or panel"
        required: true
        type: choice
        options:
          - datasource
          - panel

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ inputs.plugin_id }}
  cancel-in-progress: true

env:
  NODEJS_VERSION: 18.x
  GO_VERSION: 1.21
  GO_LINT_VERSION: 1.51.1
  GRABPL_VERSION: 3.0.43
  GCP_BUCKET: plugins-community-staging # integration-artifacts
  GCOM_API: https://grafana-dev.com

jobs:
  build-and-publish:
    name: Build and publish ${{ inputs.plugin_id }}
    runs-on: ubuntu-latest
    outputs:
      has_backend: ${{ steps.check_backend.outputs.has_backend }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Verify inputs
        run: |
          if [ -z ${{ inputs.plugin_id }} ]; then echo "Missing plugin ID"; exit 1; fi
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.PLUGINS_GOOGLE_CREDENTIALS }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Setup nodejs environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: yarn
      - name: Install frontend dependencies
        shell: bash
        working-directory: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}
        run: |
          yarn install --immutable
      - name: Download grabpl executable
        shell: sh
        working-directory: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}
        run: |
          [ ! -d ./bin ] && mkdir -pv ./bin || true
          curl -fL -o ./bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v${{ env.GRABPL_VERSION }}/grabpl
          chmod 0755 ./bin/grabpl
      - name: Check backend
        id: check_backend
        shell: bash
        run: |
          if [ -d ./pkg/tsdb/${{ inputs.plugin_id }} ]; then
            echo "has_backend=true" >> $GITHUB_OUTPUT
          else
            echo "has_backend=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup golang environment
        uses: actions/setup-go@v4
        if: steps.check_backend.outputs.has_backend == 'true'
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Mage
        shell: bash
        if: steps.check_backend.outputs.has_backend == 'true'
        run: |
          go install github.com/magefile/mage
      - name: Check tools
        shell: bash
        working-directory: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}
        run: |
          echo "======================================="
          echo "  Frontend tools"
          echo "======================================="
          echo "-------- node version -----"
          node --version
          echo "-------- npm version -----"
          npm --version
          echo "-------- yarn version -----"
          yarn --version
          echo "======================================="
          echo "  Misc tools"
          echo "======================================="
          echo "-------- docker version -----"
          docker --version
          echo "-------- jq version -----"
          jq --version
          echo "-------- grabpl version -----"
          ./bin/grabpl --version
          echo "======================================="
      - name: Check backend tools
        shell: bash
        if: steps.check_backend.outputs.has_backend == 'true'
        working-directory: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}
        run: |
          echo "======================================="
          echo "  Backend tools"
          echo "======================================="
          echo "-------- go version -----"
          go version
          echo "-------- mage version -----"
          mage --version
          echo "======================================="
      - name: build:frontend
        shell: bash
        id: build_frontend
        run: |
          command="plugin:build:commit"
          if [ "$GITHUB_REF" != "refs/heads/main" ]; then
            # Release branch, do not add commit hash to version
            command="plugin:build"
          fi
          yarn $command --scope="@grafana-plugins/${{ inputs.plugin_id }}"
          echo "version=$(cat dist/plugin.json | jq -r .info.version)" >> $GITHUB_OUTPUT
      - name: build:backend
        if: steps.check_backend.outputs.has_backend == 'true'
        shell: bash
        run: |
          make build-plugin-go PLUGIN_ID=${{ inputs.plugin_id }}
      - name: package
        working-directory: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}
        run: |
          mkdir -p ci/jobs/package
          bin/grabpl plugin package
        env:
          GRAFANA_API_KEY: ${{ secrets.PLUGINS_GRAFANA_API_KEY }}
          PLUGIN_SIGNATURE_TYPE: grafana
      - name: Check existing release
        env:
          GCOM_TOKEN: ${{ secrets.PLUGINS_GCOM_TOKEN }}
        run: |
          api_res=$(curl -X 'GET' -H "Authorization: Bearer $GCOM_TOKEN" \
            '${{ env.GCOM_API}}/api/plugins/${{ inputs.plugin_id }}?version=${{ steps.build_frontend.outputs.version }}' \
            -H 'accept: application/json')
          api_res_code=$(echo $api_res | jq -r .code)
          if [ "$api_res_code" = "NotFound" ]; then
            echo "No existing release found"
          else
            echo "Expecting a missing release, got:"
            echo $api_res
            # TODO: Re-enable
            # exit 1
          fi
      - name: store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}/ci/packages/*.zip
      - name: Publish release to Google Cloud Storage
        working-directory: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}
        run: |
          echo "Publish release to Google Cloud Storage:"
          touch ci/packages/windows ci/packages/darwin ci/packages/linux ci/packages/any
          gsutil -m cp -r ci/packages/*windows* gs://${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/windows
          gsutil -m cp -r ci/packages/*linux* gs://${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/linux 
          gsutil -m cp -r ci/packages/*darwin* gs://${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/darwin
          gsutil -m cp -r ci/packages/*any* gs://${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/any
      - name: Publish new plugin version on grafana.com
        working-directory: ./public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}
        env:
          GCOM_TOKEN: ${{ secrets.PLUGINS_GCOM_TOKEN }}
        run: |
          echo "Publish new plugin version on grafana.com:"
          echo "Plugin version: ${{ steps.build_frontend.outputs.version }}"
          result=`curl -H "Authorization: Bearer $GCOM_TOKEN" -H "Content-Type: application/json" ${{ env.GCOM_API}}/api/plugins -d "{
            \"url\": \"https://github.com/grafana/grafana/tree/main/public/app/plugins/${{ inputs.type }}/${{ inputs.plugin_id }}\",
            \"download\": {
              \"linux-amd64\": {
                \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/linux/${{ inputs.plugin_id }}-${{ steps.build_frontend.outputs.version }}.linux_amd64.zip\",
                \"md5\": \"$(cat ci/packages/info-linux_amd64.json | jq -r .plugin.md5)\"
              },
              \"linux-arm64\": {
                \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/linux/${{ inputs.plugin_id }}-${{ steps.build_frontend.outputs.version }}.linux_arm64.zip\",
                \"md5\": \"$(cat ci/packages/info-linux_arm64.json | jq -r .plugin.md5)\"
              },
              \"linux-arm\": {
                \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/linux/${{ inputs.plugin_id }}-${{ steps.build_frontend.outputs.version }}.linux_arm.zip\",
                \"md5\": \"$(cat ci/packages/info-linux_arm.json | jq -r .plugin.md5)\"
              },
              \"windows-amd64\": {
                \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/windows/${{ inputs.plugin_id }}-${{ steps.build_frontend.outputs.version }}.windows_amd64.zip\",
                \"md5\": \"$(cat ci/packages/info-windows_amd64.json | jq -r .plugin.md5)\"
              },
              \"darwin-amd64\": {
                \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/darwin/${{ inputs.plugin_id }}-${{ steps.build_frontend.outputs.version }}.darwin_amd64.zip\",
                \"md5\": \"$(cat ci/packages/info-darwin_amd64.json | jq -r .plugin.md5)\"
              },
              \"darwin-arm64\": {
                \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ inputs.plugin_id }}/release/${{ steps.build_frontend.outputs.version }}/darwin/${{ inputs.plugin_id }}-${{ steps.build_frontend.outputs.version }}.darwin_arm64.zip\",
                \"md5\": \"$(cat ci/packages/info-darwin_arm64.json | jq -r .plugin.md5)\"
              }
            }
          }"`
          echo $result
          if [[ "$(echo $result | jq -r .version)" == "null" ]]; then
            echo "Failed to publish plugin version"
            exit 1
          fi